<?php

/**
 * @file
 * Customizations for the SFDS module.
 */

declare(strict_types=1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_form_FORM_ID_alter() for `field_storage_config_edit_form`.
 */
function sfds_form_field_storage_config_edit_form_alter(
  array &$form,
  FormStateInterface $form_state
): void {
  /** @var \Drupal\field\FieldStorageConfigInterface $entity */
  $entity = $form_state->getFormObject()->getEntity();
  $bundleInfo = \Drupal::service('entity_type.bundle.info')
    ->getBundleInfo($entity->getTargetEntityTypeId());

  array_walk($bundleInfo, function (&$value, $key) {
    $value = $value['label'];
  });

  $form['sfds_container'] = [
    '#type' => 'fieldset',
    '#title' => t('Shared field display settings'),
    '#weight' => 10,
  ];

  $form['sfds_container']['sfds_enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable shared field display for this field'),
    '#default_value' => $entity->getThirdPartySetting('sfds', 'enabled', FALSE),
    '#description' => t('When enabled, any field display changes to this field will update all field display uses across all bundles.'),
  ];

  $form['sfds_container']['sfds_mode'] = [
    '#type' => 'radios',
    '#title' => t('Shared field display mode'),
    '#options' => [
      'global' => t('Global'),
      'bundle' => t('Per bundle'),
    ],
    '#default_value' => $entity->getThirdPartySetting('sfds', 'mode', 'bundle'),
    '#description' => t('When set to "Global", all bundles of the entity will use the same default display mode. When set to "Per bundle", the default display mode of the bundle will be used.'),
    '#states' => [
      'visible' => [
        ':input[name="sfds_enabled"]' => [
          'checked' => TRUE,
        ],
      ],
    ],
  ];

  $form['sfds_container']['sfds_default_bundle'] = [
    '#type' => 'radios',
    '#title' => t('Which bundle should be used as the global default?'),
    '#options' => $bundleInfo,
    '#default_value' => $entity->getThirdPartySetting('sfds', 'bundle', key($bundleInfo)),
    '#description' => t('Select the bundle whose field display settings should be used as the global default.'),
    '#states' => [
      'visible' => [
        ':input[name="sfds_enabled"]' => [
          'checked' => TRUE,
        ],
        ':input[name="sfds_mode"]' => [
          'value' => 'global',
        ],
      ],
    ],
  ];

  // Add form submit handler to save the third party settings.
  $form['actions']['submit']['#submit'][] = 'sfds_field_storage_config_edit_form_submit';
  $form['#validate'][] = 'sfds_field_storage_config_edit_form_validate';
}

/**
 * Submit handler for `field_storage_config_edit_form`.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function sfds_field_storage_config_edit_form_validate(
  array $form,
  FormStateInterface $form_state
): void {

  // Skip validation if the setting is disabled.
  if (!$form_state->getValue('sfds_enabled')) {
    return;
  }

  $mode = $form_state->getValue('sfds_mode');
  if (!in_array($mode, ['global', 'bundle'])) {
    $form_state->setErrorByName('sfds_mode', t('%value is not a valid choice', ['%value' => $mode]));
  }

  // Validate field exists on bundles only when the mode is set to global.
  if ($mode !== 'global') {
    return;
  }

  /** @var \Drupal\field\FieldStorageConfigInterface $entity */
  $entity = $form_state->getFormObject()->getEntity();
  $bundle = $form_state->getValue('sfds_default_bundle');
  $targetEntityTypeId = $entity->getTargetEntityTypeId();
  $fieldName = $entity->get('field_name');

  // Ensure the bundle exists on the entity type.
  if (!sfds_bundle_exists($targetEntityTypeId, $bundle)) {
    $form_state->setErrorByName(
      'sfds_default_bundle',
      t('The bundle %bundle does not exist on the %entity_type entity type and may not be used as the global default.', [
        '%bundle' => $bundle,
        '%entity_type' => $targetEntityTypeId,
      ]));
  }

  // Ensure the field exists on the selected bundle.
  if (!sfds_bundle_has_field($fieldName, $targetEntityTypeId, $bundle)) {
    $form_state->setErrorByName(
      'sfds_default_bundle',
      t('The field %field does not exist on the %bundle bundle and may not be used as the global default.', [
        '%field' => $fieldName,
        '%bundle' => $bundle,
      ]));
  }
}

/**
 * Submit handler for `field_storage_config_edit_form`.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function sfds_field_storage_config_edit_form_submit(
  array $form,
  FormStateInterface $form_state
): void {
  /** @var \Drupal\field\Entity\FieldStorageConfig $entity */
  $entity = $form_state->getFormObject()->getEntity();
  $entity->setThirdPartySetting('sfds', 'enabled', (bool) $form_state->getValue('sfds_enabled'));
  $entity->setThirdPartySetting('sfds', 'mode', $form_state->getValue('sfds_mode'));
  $entity->setThirdPartySetting('sfds', 'bundle', $form_state->getValue('sfds_default_bundle'));
  $entity->save();
}

/**
 * Check if an entity's bundle has a field.
 *
 * @param string $fieldName
 *   The name of the field to validate.
 * @param string $entityType
 *   The entity type to validate.
 * @param string $bundle
 *   The bundle to validate.
 *
 * @return bool
 *   True if the field exists on the bundle for the entity type.
 */
function sfds_bundle_has_field(
  string $fieldName,
  string $entityType,
  string $bundle
): bool {
  $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($entityType, $bundle);
  return isset($field_definitions[$fieldName]);
}

/**
 * Check if an entity type has a bundle.
 *
 * @param string $entityType
 *   The entity type to validate.
 * @param string $bundle
 *   The bundle to validate.
 *
 * @return bool
 *   True if the bundle exists on the entity type.
 */
function sfds_bundle_exists(
  string $entityType,
  string $bundle
): bool {
  $bundleInfo = \Drupal::service('entity_type.bundle.info')->getBundleInfo($entityType);
  return isset($bundleInfo[$bundle]);
}

/**
 * Implements hook_form_FORM_ID_alter() for `entity_view_display_edit_form`.
 */
function sfds_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state): void {
  // Copy the settings form template from the field_ui.
  $settingsSummary = [
    '#type' => 'inline_template',
    '#template' => '<div class="field-plugin-summary">{{ summary|safe_join("<br />") }}</div>',
    '#context' => ['summary' => []],
    '#cell_attributes' => ['class' => ['field-plugin-summary-cell']],
  ];

  $fieldConfigStorage = \Drupal::entityTypeManager()->getStorage('field_config');
  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $viewDisplay */
  $viewDisplay = $form_state->getFormObject()->getEntity();

  // Loop through the fields and check if they have
  // shared field display enabled.
  foreach ($form['#fields'] as $field) {
    /** @var \Drupal\field\Entity\FieldConfig $fieldEntity */
    $fieldEntity = $fieldConfigStorage->load("{$viewDisplay->getTargetEntityTypeId()}.{$viewDisplay->getTargetBundle()}.${field}");
    // Guard an empty entity. This usually happens in a multi-lingual setup.
    if (empty($fieldEntity)) {
      continue;
    }
    $fieldStorage = $fieldEntity->getFieldStorageDefinition();

    // If enabled, let's add to the summary to indicate this.
    if ($fieldStorage->getThirdPartySetting('sfds', 'enabled', FALSE)) {
      $summary = [];
      $sfdsMode = $fieldStorage->getThirdPartySetting('sfds', 'mode', 'bundle');
      $sfdsBundle = $fieldStorage->getThirdPartySetting('sfds', 'bundle', '');
      $summary[] = t("Shared field display is enabled for this field in %mode mode.", ['%mode' => $sfdsMode]);
      $newLink = NULL;

      if ($sfdsMode === 'global') {
        $summary[] = t("The 'default' display of the %bundle bundle is used as the global default for all display settings for this field.", ['%bundle' => $sfdsBundle]);

        // The bundle being viewed is not the global default. Show the link
        // if the bundles differ or if the display mode is not the default
        // of the SFDS selected bundle.
        if (
          $viewDisplay->getTargetBundle() !== $sfdsBundle ||
          (
            $viewDisplay->getTargetBundle() === $sfdsBundle &&
            $viewDisplay->getMode() !== 'default'
          )
        ) {
          $newLink = Url::fromRoute("entity.entity_view_display.{$viewDisplay->getTargetEntityTypeId()}.view_mode", [
            'node_type' => $sfdsBundle ,
            'view_mode_name' => 'default',
          ]);
        }
      }
      else {
        $summary[] = t("Display settings are managed in the 'default' display of this bundle.");
        // Link to the default display of the selected bundle.
        if ($viewDisplay->getMode() !== 'default') {
          $newLink = Url::fromRoute("entity.entity_view_display.{$viewDisplay->getTargetEntityTypeId()}.view_mode", [
            'node_type' => $viewDisplay->getTargetBundle(),
            'view_mode_name' => 'default',
          ]);
        }
      }

      // If there is a link present, append it to the summary.
      if (!is_null($newLink)) {
        $summary[] = t("<a href='@link'>Click here to manage the display settings for this field.</a>", ['@link' => $newLink->toString()]);

        // Visually hide the fields if they are not the management display.
        $form['fields'][$field]['label']['#attributes']['class'][] = 'visually-hidden';
        $form['fields'][$field]['plugin']['type']['#attributes']['class'][] = 'visually-hidden';
      }

      // Ensure we have a summary element present.
      if (empty($form['fields'][$field]['settings_summary'])) {
        $form['fields'][$field]['settings_summary'] = $settingsSummary;
      }

      // Merge our summary into the existing summary.
      $form['fields'][$field]['settings_summary']['#context']['summary'] = array_merge($form['fields'][$field]['settings_summary']['#context']['summary'], $summary);
    }
  }
}
